# If set, running the role will remove all files that it normally creates. It doesn't uninstall
# packages, however.
django_uninstall: no

# Name used as a default value in most variables below
django_name: django
# Whether the project is in python 3
django_ispython3: yes
# Root path of the django project
django_path: "/opt/{{ django_name }}"

# Domain name under which the project is served. Ends up in ALLOWED_HOSTS and as PROJECT_DOMAIN
# in local_settings. It also, of course, ends up in nginx conf as server_name.
django_domain_name: "{{ django_name }}.vagrant.dev"

# Extra domain names to support in this project. Ends up in ALLOWED_HOSTS. It's also added to nginx
# conf's server_name.
django_extra_domain_names: []

# Path of the virtualenv where we install python dependencies
django_env: "{{ django_path }}/env"
# Path where the source of the project is placed.
django_project_path: "{{ django_path }}/project"
# Path, inside the project's source, where "manage.py" lives.
django_src_path: "{{ django_project_path }}/src"
# Path for STATIC_ROOT
django_static_path: "{{ django_path }}/static"
# Path for MEDIA_ROOT
django_media_path: "{{ django_path }}/media"
# Path for the maintenance page
django_maintenance_path: "{{ django_path }}/maintenance"

# URL to git repo of the project. if django_project_symlink_dest isn't set, this repo will be
# cloned in django_project_path.
django_project_repo_url: ""
django_project_repo_version: master
# If set, we place a symlink at django_project_path pointing to this path. Usually used in
# Vagrant environment, allowing us to do live reloads upon file edits.
django_project_symlink_dest: ""

# Owner of django_path. Most commands in this role are ran under this user.
# Will be created if it doesn't exist.
django_user: "{{ django_name }}"

# Type of database to install. Choices: postgres, mariadb
django_dbtype: postgres

# User to use for db connection.
django_dbuser: "{{ django_user }}"

# DB name to use.
django_dbname: "{{ django_name }}"

# password to use for db connection.
django_dbpass: whatever

# Value of the ENGINE param in Django settings' DATABASES dictionary.
django_dbengine_name: "django.db.backends.{{ (django_dbtype == 'postgres') | ternary('postgresql_psycopg2', 'mysql') }}"

# Database encoding definition. By default will be used the system encoding provided.
# Used by the moment only by mariadb.
#django_db_encoding: 'db_encoding'

# Ends up in SECRET_KEY setting.
django_secret_key: whatever

# Arbitrary python code to add to local_settings.py. Will be appended as-is to the end of the file.
django_env_settings_extra: ''

# If set, uwsgi+nginx will be configured for django, unset in case that you don't need to install them.
django_create_uwsgi_config: yes

# Ends up in "processes" uwsgi config
django_uwsgi_process_count: 5

# Sets the "touch-reload" wsgi option. This path, whenever it's touched, will cause the wsgi
# process (uwsgi, ...) to reload itself so that changed python code is properly reloaded.
# The default path is the project directory because its mtime is generally updated each time we
# checkout a new commit, which is the appropriate time for a reload.
# You can set to "" to disable touch-reload.
django_touch_reload_path: "{{ django_project_path }}"

# Fixtures to load in django after deployment. list of paths relative to manage.py
django_fixtures_to_load: []

# If set, we will try, before installing Django, to provide initial data for it, that is, a DB
# and media files. We will do so through django_initial_data_restore_script.
django_provide_initial_data: no

# Path of the script to call to restore our DB and media files. It's expected to import SQL dumps
# from backup into our django_dbname and to restore media files into django_media_path.
django_initial_data_restore_script: "{{ django_path }}/restore.sh"

# If set, we will disallow robots by including the "disallow_robots" snippet provided by the
# nginx role.
django_disallow_robots: no

# If set, our nginx config will only answer to HTTPS requests, ignoring requests on port 80.
django_ssl_only: no

# django_env_variables can be used to define some environment variables that should be set before
# running the Django application. For example:
#
# django_env_variables:
#   DJANGO_SETTINGS_MODULE: myproject.settings
#
django_env_variables: {}

django_redirect_domain_names: []

# If set, access to /media/ directory will only be allow from this/these IP address, CIDR and/or domain
nginx_restrict_media_access_to: []

nginx_client_max_body_size: "1m"

# If defined to yes, will assume that a proxy is handling ssl for us and listen on port 80
use_wildcard_ssl_proxy: no
